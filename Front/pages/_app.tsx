import type { AppProps } from "next/app";
import { useContext, useEffect, useRef, useState } from "react";
import SideBar from "../components/sideBar";
import Style from "../styles/app.module.css";
import { Provider } from "react-redux";
import store from "../redux/configureStore";
import { useRouter } from "next/router";
import io, { Socket } from "socket.io-client";
import TokenContextProvider, { TokenContext } from '../contexts/TokenContext'
import Head from 'next/head'
import favicon from '../public/favicon.ico'

function SafeHydrate({ children }: any) {
  return (
    <div suppressHydrationWarning>
      {typeof window === 'undefined' ? null : children}
    </div>
  )
}

function MyApp({ Component, pageProps }: AppProps) {
  const array:any = useRef([])
  const [notification, changeNotification] = useState<any>([]);
  const [showSidBar, setShowSidBar] = useState<boolean>(false);
  const [update, setUpdate] = useState<boolean>(false);
  const [socket, changeSocket] = useState<Socket>()
  const [userInfo, setUserInfo] = useState<any>();
  const [showContent, setShowContent] = useState<boolean>(false);
  const router = useRouter();
  const [isConnected, setIsConnected] = useState<boolean>(false);
  const {accessToken, refreshToken} = useContext(TokenContext);

  useEffect(() => {
    document.getElementsByTagName("body")[0].style.margin = "0";
    document.getElementsByTagName("body")[0].style.width = "100%";
    document.getElementsByTagName("body")[0].style.height = "100%";
  });
  useEffect(() => {
    let socketOptions = {
      transportOptions: {
        polling: {
          extraHeaders: {
            Authorization: `Bearer ${localStorage.getItem("accessToken")}`, //'Bearer h93t4293t49jt34j9rferek...'
          },
        },
      },
      transports: ["websocket"],
      auth: {
        Authorization: `${localStorage.getItem("accessToken") as string}`,
      },
    };
    changeSocket(io(
      `${process.env.NEXT_PUBLIC_IP_ADRESSE}:${process.env.NEXT_PUBLIC_PORT}`,
      socketOptions
    ));
  },[isConnected]);
  useEffect(()=>{
    socket?.emit("startChannels");
    socket?.on("accepted",(data:any)=>{
      if (data === "Accepted")
        router.push("/game")
      else if (data === "Playing") 
        alert("The user is in game!")
      else
        alert("The user is disconnected")
    })
    socket?.off("declined").on("declined",(data:any)=>{
        alert(data + " Has declined your invitation")
    })
  },[socket])
  useEffect(() => {
    
    console.clear();
    console.log = function(){};
  })



  return (
    <>
      <Head>
        <title>ft_transcendance</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href={favicon.src} />
      </Head>
      <SafeHydrate>
        <Provider store={store}>
          <div className={Style.App}>
              <TokenContextProvider>
                	<Component {...pageProps} socket={socket} user={userInfo} isConnected={isConnected} setIsConnected={setIsConnected} />
            	</TokenContextProvider>
            {typeof window != "undefined" &&
            (window.location.href.split("/")[3] != "game" && window.location.pathname.split("/")[1] != "errorPage" && window.location.pathname.split("/")[1] != "login")? (
              <SideBar
                setShowSidBar={setShowSidBar}
                showSidBar={showSidBar}
                setUpdate={setUpdate}
                update={update}
                socket={socket}
              />
            ) : (
              ""
            )}
          </div>
        </Provider>
      </SafeHydrate>
    </>
  );
}

export default MyApp;
